// Distinguish between internal and external ids (internal ids should be bigint serials and primary keys, autoincremented, for the most part)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  handle    String    @unique @default(uuid())
  passhash  String
  salt      String    @db.VarChar(32)
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  items     Item[]
  outfits   Outfit[]
}

model Item {
  id         String       @id @default(uuid())
  ownerId    Int
  createdAt  DateTime     @default(now())
  title      String
  updatedAt  DateTime?
  owner      User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  photos     Photo[]
  itemTags   ItemTag[]
  OutfitItem OutfitItem[]
}

model Photo {
  id        String    @id @default(uuid())
  url       String    @unique @db.VarChar(256)
  publicId  String    @unique @db.VarChar(256)
  itemId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  item      Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

model Tag {
  id        Int       @id @default(autoincrement())
  type      TagType
  name      String?   @unique
  key       String?
  value     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  ItemTags  ItemTag[]

  @@unique([key, value])
}

model ItemTag {
  id     Int    @id @default(autoincrement())
  itemId String
  tagId  Int
  item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([itemId, tagId])
}

enum TagType {
  NAME
  KEY_VALUE
}

model Outfit {
  id          String       @id @default(uuid())
  ownerId     Int
  createdAt   DateTime     @default(now())
  wornAt      DateTime[]
  name        String?
  outfitItem  OutfitItem[]
  outfitPhoto OutfitPhoto[]
  owner       User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model OutfitItem {
  itemId   String
  outfitId String
  item     Item   @relation(fields: [itemId], references: [id])
  outfit   Outfit @relation(fields: [outfitId], references: [id])

  @@id([itemId, outfitId])
}

model OutfitPhoto {
  id        String    @id @default(uuid())
  url       String    @unique @db.VarChar(256)
  publicId  String    @unique @db.VarChar(256)
  outfitId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  outfit    Outfit    @relation(fields: [outfitId], references: [id], onDelete: Cascade)
}
